openapi: 3.0.3
info: 
  title: "CV management system"
  description: "Application to manage candidates CV"
  version: "1.0.0"

servers:
  - url: http://localhost:8000


paths: 
  /: 
    get:
      operationId: views.health.hello_world
      summary: Hello world
      responses:
        '200':
          description: Successful operation
  /health:
    get:
      operationId: views.health.health
      summary: Hello world
      responses:
        '200':
          description: Successful operation
# should be there also get for: registration, login, logout? And separate endpoints for roles as hr, candidate, admin
  /my/registration:
    post:
      operationId: views.login_and_registration.register_user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        x-body-name: body
        required: true
      summary: Register new user
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "404":
          description: Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  field_name:
                    type: string
                  error:
                    type: string
  /my/login:
    post:
      operationId: views.login_and_registration.login
      summary: Log in user to the system
      responses:
        "501":
          description: Not implemented
  /my/logout:
    post:
      operationId: views.login_and_registration.logout
      summary: Log out user from the system
      responses:
        "501":
          description: Not implemented
  /my:
    post:
      operationId: views.candidate.add_new_cv
      summary: Adds new candidate cv
      requestBody:
        x-body-name: body
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/CV'
        required: true
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CV'
        "404":
          description: Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  field_name:
                    type: string
                  error:
                    type: string
    delete:
      operationId: views.candidate.delete_cv
      summary: Deletes candidate cv
      responses:
        "501":
          description: Not implemented
    patch:
      operationId: views.candidate.update_cv
      summary: Update candidate cv data
      responses:
        "501":
          description: Not implemented
    get:
      operationId: views.candidate.get_cv
      summary: Get cv data
      responses:
        "501":
          description: Not implemented
  /my/skills:
    get:
      operationId: views.candidate.get_my_skills
      summary: Get detailed candidate cv - skills
      responses:
        "501":
          description: Not implemented
  /my/experience:
    get:
      operationId: views.candidate.get_my_exp
      summary: Get detailed cv data - experience
      responses:
        "501":
          description: Not implemented
  /hr/candidates:
    get:
      operationId: views.hr.get_all_cvs
      summary: Get list of all candidates cv
      responses:
        "501":
          description: Not implemented
  /hr/candidates/{candidate_id}:
    get:
      operationId: views.hr.get_cv_details
      summary: Get detailed cv of specific candidate
      parameters:
        - name: candidate_id
          in: path
          description: ID of candidate to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "501":
          description: Not implemented
  /hr/skills:
    get:
      operationId: views.hr.get_candidates_skills_summary
      summary: Get skills summary, number of candidates with concrete skill and its level
      responses:
        "501":
          description: Not implemented
  /hr/skills/{skill}:
    get:
      operationId: views.hr.get_separate_skill_summary
      summary: Get information about number of candidates which have passed skill with its level
      parameters:
        - name: skill
          in: path
          description: skill name of skill to return
          required: true
          schema:
            type: string
      responses:
        "501":
          description: Not implemented

  /admin/users/{user_id}:
    get:
      operationId: views.admin.get_user
      summary: View user account
      parameters:
        - name: user_id
          in: path
          description: ID of user to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '501':
          description: Not implemented
    delete:
      operationId: views.admin.delete_user
      summary: Delete user account
      parameters:
        - name: user_id
          in: path
          description: ID of user to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '501':
          description: Not implemented
    patch:
      operationId: views.admin.update_user_data
      summary: Update user data
      parameters:
        - name: user_id
          in: path
          description: ID of user to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '501':
          description: Not implemented
  /admin/users:
    get:
      operationId: views.admin.get_users
      summary: Get list of users
      responses:
        '501':
          description: Not implemented
    post:
      operationId: views.admin.add_user
      summary: Add new user
      responses:
        '501':
          description: Not implemented    
components:
  schemas:
    User:
      type: object
      properties:
        user_id: 
          type: integer
          format: int64
          example: 10
        email:
          type: string
          example: name@email.com
        username: 
          type: string
          example: Anna
        surname: 
          type: string
          example: Kovalska
        password:
          type: string
          example: strongPassword)12
        repeat_password:
          type: string
          example: strongPassword)12
        registration_date:
          type: string
          format: date-time
    Skill: 
      type: object
      properties:  
        id: 
          type: integer
          format: int64
        name:
          type: string
        level:
          type: integer
          format: int64
    Organization:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        address:
          type: string
    Experience: 
      type: object
      properties:  
        id: 
          type: integer
          format: int64
        years_of_employment:
          type: integer
          multipleOf: 0.1
        project_description:
          type: string
        employer:
          type: array
          items: 
            type: object
            $ref: '#/components/schemas/Organization'
    CV:
      type: object
      properties:
        id: 
          type: integer
          format: int64
        candidate_id:
          type: string
          format: uuid
        skills:
          type: array
          items:
            $ref: '#/components/schemas/Skill'
        experiences:
          type: array
          items:
            $ref: '#/components/schemas/Experience'
